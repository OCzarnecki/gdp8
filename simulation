#!bin/python

import argparse
from datetime import datetime
import glob
import os
import sys
import time

from pathlib import Path

from aea.configurations.base import PublicId
from aea.manager import MultiAgentManager

from visualisation import main as vis_main
from visualisation import stats

class ApplicationRunner:
    """Warning for filepaths: the framework resolves
       keypaths relative to the MAM's data folder
       (mam/data/AGENT_NAME), but the CWD is the directory
       that this script is run from (normally the project
       root, ./). This means that paths for _our_ code are
       relative to the project root."""
    def __init__(self):
        self._debug_logfile = None

    def _init_mam(self):
        WORKING_DIR = "mam"
        REGISTRY_PATH = "packages"

        self._manager = MultiAgentManager(
            WORKING_DIR,
            registry_path = REGISTRY_PATH
        )
        self._manager.start_manager(local=True)

    def _start_env(self, args):
        env_id = PublicId.from_str("gdp8/env_aea:0.1.0")
        self._manager.add_project(env_id)
        agent_overrides = {
            "connection_private_key_paths": {
                "fetchai": "../../../keys/ckp.txt"
            },
            "private_key_paths": {
                "fetchai": f"../../../keys/fetchai_private_key-ENV.txt"
            },
            "logging_config": self._get_logging_config(args) 
        }
        env_skill_id = PublicId.from_str("gdp8/env_action_each_turn:0.1.0")
        component_overrides = [{
            **env_skill_id.json,
            "type": "skill",
            "behaviours": {
                "env_logic": {
                    "args": {
                        "mapping_path": "keys/mapping.json",
                        "max_turns": args.max_turns
                    }
                }
            },
            "models": {
                "environment": {
                    "args": {
                        "agent_count": args.agent_count,
                        "agent_max_capacity": args.agent_max_capacity,
                        "agent_mining_speed": args.agent_mining_speed,
                        "initial_agent_water": args.initial_agent_water,
                        "initial_oasis_water": args.initial_oasis_water,
                        "oasis_count": args.oasis_count,
                        "size_x": args.size_x,
                        "size_y": args.size_y
                    }
                }
            }
        }]
        self._manager.add_agent(
                env_id, 
                agent_overrides=agent_overrides,
                component_overrides=component_overrides
        )
        self._manager.start_agent(env_id.name)

    def _add_agent_with_id(self, agent_id_simulation, args):
        name = self._agent_name_from_id(agent_id_simulation)
        agent_overrides = {
            "connection_private_key_paths": {
                "fetchai": "../../../keys/ckp.txt"
            },
            "private_key_paths": {
                "fetchai": f"../../../keys/fetchai_private_key-{agent_id_simulation}.txt"
            },
            "logging_config": self._get_logging_config(args) 
        }
        agent_skill_id = PublicId.from_str("gdp8/agent_action_each_turn:0.1.0")
        component_overrides = [{
            **agent_skill_id.json,
            "type": "skill",
            "behaviours": {
                "agent_behaviour": {
                    "args": {
                        "strategy_used": args.strategy_name
                    }
                }
            },
            "handlers": {
                "agent_message_handler": {
                    "args": {
                        "strategy_used": args.strategy_name
                    }
                },
                "environment_message_handler": {
                    "args": {
                        "strategy_used": args.strategy_name
                    }
                }
            },
            "models": {
                "altruistic_goldfish_strategy": {
                    "args": {
                        "agent_max_capacity": args.agent_max_capacity,
                        "thirsty_below_that_percentage_of_water": args.thirsty_below_that_percentage_of_water
                    }
                },
                "dog_strategy": {
                    "args": {
                        "agent_max_capacity": args.agent_max_capacity,
                        "agent_max_dig_rate": args.agent_mining_speed,
                        "thirsty_below_that_percentage_of_water": args.thirsty_below_that_percentage_of_water
                    }
                }
            }
        }]
        self._manager.add_agent(
                self._agent_id, 
                agent_name = name,
                agent_overrides=agent_overrides,
                component_overrides=component_overrides
        )

    def _start_agents(self, args):
        self._agent_id = PublicId.from_str("gdp8/agent_aea:0.1.0")
        self._manager.add_project(self._agent_id)
        for i in range(args.agent_count):
            self._add_agent_with_id(i, args)
            self._manager.start_agent(
                    self._agent_name_from_id(i)
            )

    def _get_logging_config(self, args):
        if not self._debug_logfile:
            self._debug_logfile = datetime.now().strftime(
                "debug-logs/log-%Y-%m-%d_%H.%M.%S-%Z.txt"
            )
        return {
            "disable_existing_loggers": True,
            "root": {
                "level": args.loglevel,
                "handlers": ["file", "console"]
            },
            "handlers": {
                "console": {
                    "class": "logging.StreamHandler",
                    "stream" : "ext://sys.stdout"
                },
                "file": {
                    "class": "logging.FileHandler",
                    "filename": self._debug_logfile
                }
            }
        }

    def _agent_name_from_id(self, agent_id):
        return f"agent_{agent_id}"

    def _cleanup(self):
        if self._manager:
            try:
                self._manager.stop_all_agents()
            finally:
                self._manager.stop_manager()

    def run(self, args):
        try:
            self._init_mam()
            self._start_agents(args)
            time.sleep(5.0)
            self._start_env(args)
            while not Path("$SIMULATION_ENDED").exists():
                time.sleep(1.)
            Path("$SIMULATION_ENDED").unlink()
        finally:
            print("*" * 500)
            print("Time to clean up!")
            self._cleanup()

    def _most_recent_log_file(self):
        logfiles = glob.glob('logs/*.json')
        if not logfiles:
            return None
        return max(logfiles, key=os.path.getctime)

    def _log_file_from_args(self, args):
        file = args.logfile
        if not file:
            # Find newest file in log dir
            file = self._most_recent_log_file()
            if not file:
                print("No logfiles exist in the logs/ folder yet. Please specify a log file using the --logfile parameter, or run the simulation (simulation run) to generate one")
        return file

    def play_replay(self, args):
        file = self._log_file_from_args(args)
        if file:
            vis_main.run_replay(file)

    def show_stats(self, args):
        file = self._log_file_from_args(args)
        if file:
            stats.main(file)

    def main(self):
        parser = argparse.ArgumentParser()
        parser.add_argument(
                "--loglevel",
                "-v",
                choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
                default="DEBUG",
                help="log level"
        )
        subparsers = parser.add_subparsers(
                required=True,
                help="command to run"
        )
        subparsers.dest = "command"

        parser_run = subparsers.add_parser(
                "run",
                help="run the simulation"
        )
        parser_run.add_argument(
                "agent_count",
                type=int,
                help="number of agents to start"
        )
        parser_run.add_argument(
                "strategy_name",
                choices=[
                    "Explorer Dogs",
                    "Lone Goldfish",
                    "Altruistic Goldfish"
                ],
                help="strategy all the agents will use"
        )
        parser_run.add_argument(
                "--max_turns",
                help="limit on the number of turns the simulation will run for",
                type=int,
                default=250
        )
        parser_run.add_argument(
                "--agent_max_capacity",
                help="amount of water an agent can carry at most",
                type=int,
                default=50
        )
        parser_run.add_argument(
                "--agent_mining_speed",
                help="amount of water an agent can mine from an oasis per turn",
                type=int,
                default=10
        )
        parser_run.add_argument(
                "--initial_agent_water",
                help="amount of water an agent starts with",
                type=int,
                default=50
        )
        parser_run.add_argument(
                "--initial_oasis_water",
                help="amount of water in one of the randomly distributed oases",
                type=int,
                default=500
        )
        parser_run.add_argument(
                "--oasis_count",
                help="how many oases to distribute randomly over the desert",
                type=int,
                default=20
        )
        parser_run.add_argument(
                "--size_x",
                help="width of the simulation grid",
                type=int,
                default=20
        )
        parser_run.add_argument(
                "--size_y",
                help="height of the simulation grid",
                type=int,
                default=20
        )
        parser_run.add_argument(
                "--thirsty_below_that_percentage_of_water",
                help="config parameter for Explorer Dogs and Altruistic Goldfish strategies",
                type=int,
                default=15
        )
        parser_run.set_defaults(func=self.run)

        parser_play_replay = subparsers.add_parser(
                "play-replay",
                help="visualise results of a simulation run"
        )
        parser_play_replay.add_argument(
                "--logfile",
                help="log file to use (default: newest log file in logs/ directory"
        )
        parser_play_replay.set_defaults(func=self.play_replay)

        parser_show_stats = subparsers.add_parser(
                "show-stats",
                help="show summary statistics for results of a simulation run"
        )
        parser_show_stats.add_argument(
                "--logfile",
                help="log file to use (default: newest log file in logs/ directory"
        )
        parser_show_stats.set_defaults(func=self.show_stats)

        args = parser.parse_args()
        args.func(args)
        return

        if len(sys.argv) != 3:
            print("Usage: run_agents AGENT_COUNT STRATEGY_NAME")
            return

if __name__ == "__main__":
    ApplicationRunner().main()
